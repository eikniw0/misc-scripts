#!/system/bin/env bash

fatal() {
	printf "\e[1;41;37m FATAL ERROR \e[m \e[1m$@\n"
	exit 1
}

SCRIPTS_ROOTDIR="$HOME/etc/bash/functions.d"
. "$SCRIPTS_ROOTDIR"/msg.sh &>/dev/null || fatal "'msg.sh' not found"
. "$SCRIPTS_ROOTDIR"/spinner.sh &>/dev/null || fatal "'spinner.sh' not found"



usage() {
	msg "Usage: $(basename $0) [-<1-19>] [-k] [-p] <INPUT> [INPUT2] ...\n" >&2
	exit ${1:-}
}

cleanup() {
	if [ ${completed:-0} -eq 1 ]; then
		if [ -n "${base:-}" ]; then
			rm -f "$base.tar" "$base.git.tar"
		fi
	else
		if [ -n "${base:-}" ]; then
		rm -f "$base.tar" "$base.git.tar" "$base.tar.zst" "$base.git.tar.zst"
		fi
	fi
}
trap cleanup EXIT


# parse_input takes an arg like "adguard" and expands it into
# all the files that will be moved, then caling out for the
# rest.
parse_input() {
	test -n "${1:-}" || fatal "parse_input called with no args!"

	local input="${1%/}"
	local dirname="$(dirname $input)"

	if (( $INC_PATH )); then
		local src_dir="$input"
		# Replace slashes with dashes & make lowercase
		local new_base="$(echo ${input/\/-} | tr A-Z a-z)"
	else
		local src_dir="$(basename $input)"
		local new_base="$(basename $input | tr A-Z a-z)"
	fi

	(( INC_PATH )) || cd "$dirname"

	# Gotta be a better way...
	printf " $save   '$src_dir' --> '$new_base.tar.zst'"
	spin create_tarball "$src_dir" "$new_base"
	echo
#	finalsize="$(ls -lh $new_base.tar.zst | awk '{print $5}')"
#	msg "  final size: $mag$finalsize$wht ($cyn$new_base.tar.zst$wht)"
#	echo

	(( INC_PATH )) || cd "$dirname"
}


create_tarball() {
	local list="$(mktemp $TMPDIR/xtar-XXXXXXX.list)"
	find "$1" -not -type f >"$list" 2>/dev/null
	tar \
		--preserve-permissions \
		--same-owner \
		--xattrs \
		--xattrs-include='*.*' \
		--create \
		--file "$1.tar" \
		--files-from "$list" \
		    || fatal "tar failed"

	zstd -$C_LVL \
    	 --threads=0 \
	     --quiet \
	     --force \
	     --rm \
	     "$1.tar" \
		 		|| fatal "zstd failed"

	if (( RM_SRC )); then
		rm -rf "$1" || fatal "rm failed"
	fi
	rm -f "$list"
}

#	finalsize="$(ls -lh $base.tar.zst | awk '{print $5}')"
#	msg "  final size: $mag$finalsize$wht ($cyn$base.tar.zst$wht)"

[ $# -eq 0 ] && usage

INPUTS=()
C_LVL=15	# still pretty quick imho
RM_SRC=0
INC_PATH=0

while [ -n "${1:-}" ]; do
	case "$1" in
		-h|--help)
			usage 0
			;;
		-[1-9]*)
			C_LVL=${1%-}
			;;
		-r|--remove)
			RM_SRC=1
			;;
		-p|--path)
			INC_PATH=1
			;;
		-*)
			fatal "Invalid argument: '$1'"
			;;
		*)
			INPUTS+=("$1")
			;;
	esac
	shift 1
done

[ ${#INPUTS[@]} -eq 0 ] \
	&& fatal "No input files given."

for input in "${INPUTS[@]}"; do
	parse_input "$input"
done

# vim: ft=bash ts=4 sw=4 noet ai
